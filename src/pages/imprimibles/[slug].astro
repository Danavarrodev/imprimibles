---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";

/** Paths estáticos */
export async function getStaticPaths() {
  const entries = await getCollection("imprimibles");
  return entries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

/** Props de la página */
const { entry } = Astro.props;
const { title, description, cover, pdf, subject, level, date, tags } =
  entry.data;

/** Utilidades */
const site = Astro.site ?? "https://imprimibles.vercel.app";
const pageUrl = new URL(`/imprimibles/${entry.slug}`, site).href;

const isMeta = cover && typeof cover === "object" && "src" in cover;
const coverSrcAbs = cover
  ? isMeta
    ? new URL(cover.src, site).href
    : new URL(String(cover), site).href
  : undefined;

const ogImage = coverSrcAbs ?? new URL("/og.png", site).href;

/** PDF absoluto (SEO/JSON-LD) */
const pdfUrl = pdf
  ? /^https?:\/\//i.test(pdf)
    ? pdf
    : new URL(pdf.startsWith("/") ? pdf : `/${pdf}`, site).href
  : undefined;

/** HREF para botón (dev-friendly) */
const pdfHref = pdf
  ? /^https?:\/\//i.test(pdf)
    ? pdf
    : pdf.startsWith("/")
      ? pdf
      : `/${pdf}`
  : undefined;

/** Relacionados (mismo subject o level) */
const all = await getCollection("imprimibles");
const related = all
  .filter((e) => e.slug !== entry.slug)
  .filter((e) => {
    const d = e.data || {};
    const sameSubject = subject && d.subject && d.subject === subject;
    const sameLevel = level && d.level && d.level === level;
    return sameSubject || sameLevel;
  })
  .sort((a, b) => {
    const da = new Date(a.data?.date ?? 0).getTime();
    const db = new Date(b.data?.date ?? 0).getTime();
    return db - da;
  })
  .slice(0, 3);

/** JSON-LD */
const organization = {
  "@type": "Organization",
  name: "Imprimibles Educativos",
  url: site,
};

const learningLd = {
  "@context": "https://schema.org",
  "@type": ["LearningResource", "CreativeWork"],
  name: title,
  description,
  inLanguage: "es",
  educationalLevel: level || undefined,
  about: subject || undefined,
  keywords: Array.isArray(tags) && tags.length ? tags.join(", ") : undefined,
  isAccessibleForFree: true,
  url: pageUrl,
  image: coverSrcAbs,
  thumbnailUrl: coverSrcAbs,
  datePublished: date ? new Date(date).toISOString() : undefined,
  author: organization,
  publisher: organization,
  mainEntityOfPage: pageUrl,
  potentialAction: pdfUrl
    ? { "@type": "DownloadAction", target: pdfUrl }
    : undefined,
  encoding: pdfUrl
    ? [
        {
          "@type": "MediaObject",
          fileFormat: "application/pdf",
          contentUrl: pdfUrl,
        },
      ]
    : undefined,
};

const webPageLd = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  name: title,
  url: pageUrl,
  primaryImageOfPage: coverSrcAbs,
  description,
  isPartOf: { "@type": "WebSite", name: "Imprimibles Educativos", url: site },
};

const breadcrumbsLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: "Imprimibles",
      item: new URL("/imprimibles", site).href,
    },
    { "@type": "ListItem", position: 2, name: title, item: pageUrl },
  ],
};

const relatedLd =
  related.length > 0
    ? {
        "@context": "https://schema.org",
        "@type": "ItemList",
        itemListElement: related.map((r, i) => ({
          "@type": "ListItem",
          position: i + 1,
          url: new URL(`/imprimibles/${r.slug}`, site).href,
          name: r.data?.title,
        })),
      }
    : undefined;

/** Iconos SVG inline (sin dependencias) */
const ICONS = {
  book: `<svg xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/><path d="M4 4.5A2.5 2.5 0 0 1 6.5 2H20v18H6.5A2.5 2.5 0 0 0 4 22.5Z"/></svg>`,
  calc: `<svg xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8"><rect x="5" y="2" width="14" height="20" rx="2"/><path d="M8 6h8M8 10h2m4 0h2M8 14h2m4 0h2M8 18h8"/></svg>`,
  tag: `<svg xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8"><path d="M21 8l-7-7-11 11v7h7L21 8z"/><path d="M7.5 7.5h.01"/></svg>`,
  level: `<svg xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8"><path d="M4 14h16M4 10h16M7 6h10v12H7z"/></svg>`,
  pdf: `<svg xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8Z"/><path d="M14 2v6h6"/><path d="M10 13h4M8 17h8"/></svg>`,
};

/** Helper para icono de subject */
function subjectIcon(label?: string) {
  const k = (label ?? "").toLowerCase();
  if (k === "matemáticas" || k === "matematicas") return ICONS.calc;
  if (k === "lengua") return ICONS.book;
  return ICONS.tag;
}
---

<BaseLayout
  title={`${title} | Imprimibles Educativos`}
  description={description}
  ogImage={ogImage}
  ogType="article"
>
  <Fragment slot="head">
    <link rel="canonical" href={pageUrl} />
    <meta property="og:url" content={pageUrl} />
    {pdfUrl && <link rel="alternate" type="application/pdf" href={pdfUrl} />}

    <script type="application/ld+json" set:html={JSON.stringify(learningLd)} />
    <script type="application/ld+json" set:html={JSON.stringify(webPageLd)} />
    <script
      type="application/ld+json"
      set:html={JSON.stringify(breadcrumbsLd)}
    />
    {
      relatedLd && (
        <script
          type="application/ld+json"
          set:html={JSON.stringify(relatedLd)}
        />
      )
    }
  </Fragment>

  <article class="mx-auto max-w-4xl px-4 py-8">
    <!-- Cabecera -->
    <header class="mb-6">
      <h1
        class="text-3xl md:text-4xl font-extrabold tracking-tight text-slate-900"
      >
        {title}
      </h1>
      {
        description && (
          <p class="mt-2 text-slate-600 max-w-prose">{description}</p>
        )
      }
      {
        date && (
          <p class="mt-2 text-xs text-slate-500">
            Publicado el{" "}
            <time datetime={new Date(date).toISOString()}>
              {new Date(date).toLocaleDateString("es-ES", {
                day: "2-digit",
                month: "long",
                year: "numeric",
              })}
            </time>
          </p>
        )
      }
    </header>

    <!-- Portada -->
    <section class="rounded-2xl border border-slate-200 bg-white/80 p-4 md:p-6">
      <div
        class="flex items-center justify-center min-h-[280px] md:min-h-[360px]"
      >
        {
          cover ? (
            isMeta ? (
              <Image
                src={cover}
                alt={`Portada de "${title}"`}
                width={1200}
                height={900}
                fit="contain"
                loading="eager"
                fetchpriority="high"
                class="w-auto max-h-[420px]"
              />
            ) : (
              <img
                src={String(cover)}
                alt={`Portada de "${title}"`}
                loading="eager"
                decoding="async"
                class="w-auto max-h-[420px] object-contain"
                width="1200"
                height="900"
              />
            )
          ) : (
            <img
              src="/images/placeholder.svg"
              alt={title}
              loading="lazy"
              class="w-auto max-h-[420px] object-contain"
              width="1200"
              height="900"
            />
          )
        }
      </div>
    </section>

    <!-- Detalles + CTA -->
    <section class="mt-6 rounded-2xl bg-slate-50 border p-4 md:p-6">
      <h2
        class="text-sm font-semibold text-slate-500 mb-3 uppercase tracking-wide"
      >
        Detalles
      </h2>

      <div class="flex flex-wrap gap-2 text-sm">
        {
          subject && (
            <span class="inline-flex items-center gap-2 rounded-full border border-slate-300 bg-white px-3 py-1 text-slate-700">
              <span
                class="inline-flex text-slate-600"
                set:html={subjectIcon(subject)}
              />
              {subject}
            </span>
          )
        }
        {
          level && (
            <span class="inline-flex items-center gap-2 rounded-full border border-slate-300 bg-white px-3 py-1 text-slate-700">
              <span class="inline-flex text-slate-600" set:html={ICONS.level} />
              {level}
            </span>
          )
        }
        {
          Array.isArray(tags) &&
            tags.map((t) => (
              <span class="inline-flex items-center gap-2 rounded-full border border-slate-300 bg-white px-3 py-1 text-xs text-slate-600">
                #{t}
              </span>
            ))
        }
      </div>

      <div class="mt-4 flex flex-col gap-2 sm:flex-row">
        {
          level && (
            <a
              href={`/imprimibles/nivel/${encodeURIComponent(level)}`}
              class="inline-flex items-center gap-2 rounded-full border border-slate-300 bg-white px-4 py-2 text-sm font-medium text-slate-800 hover:bg-slate-50 transition"
            >
              Ver más de {level}
            </a>
          )
        }
        {
          subject && (
            <a
              href={`/imprimibles/asignatura/${encodeURIComponent(subject)}`}
              class="inline-flex items-center gap-2 rounded-full border border-slate-300 bg-white px-4 py-2 text-sm font-medium text-slate-800 hover:bg-slate-50 transition"
            >
              Ver más de {subject}
            </a>
          )
        }
      </div>

      {
        pdfHref && (
          <div class="mt-5">
            <a
              href={pdfHref}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center gap-2 rounded-full bg-indigo-600 text-white px-6 py-3 text-sm font-medium hover:bg-indigo-700 transition"
              aria-label={`Descargar ${title} en PDF`}
            >
              <span class="inline-flex" set:html={ICONS.pdf} />
              Descargar PDF
            </a>
          </div>
        )
      }
    </section>

    <!-- Relacionados -->
    {
      related.length > 0 && (
        <section class="mt-12">
          <h2 class="text-xl md:text-2xl font-semibold mb-4">
            Imprimibles relacionados
          </h2>
          <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
            {related.map((r) => {
              const rHref = `/imprimibles/${r.slug}`;
              const rTitle = r.data?.title ?? "Imprimible";
              const rIsMeta =
                r.data?.cover &&
                typeof r.data.cover === "object" &&
                "src" in r.data.cover;

              return (
                <a
                  href={rHref}
                  data-astro-prefetch
                  class="block rounded-2xl overflow-hidden border hover:shadow-md transition bg-white"
                >
                  <div class="flex items-center justify-center bg-slate-100 min-h-[176px]">
                    {r.data?.cover ? (
                      rIsMeta ? (
                        <Image
                          src={r.data.cover}
                          alt={rTitle}
                          width={600}
                          height={400}
                          fit="contain"
                          loading="lazy"
                          class="max-h-[176px] w-auto"
                        />
                      ) : (
                        <img
                          src={String(r.data.cover)}
                          alt={rTitle}
                          loading="lazy"
                          class="max-h-[176px] object-contain w-auto"
                        />
                      )
                    ) : (
                      <img
                        src="/images/placeholder.svg"
                        alt={rTitle}
                        loading="lazy"
                        class="max-h-[176px] object-contain w-auto"
                      />
                    )}
                  </div>
                  <div class="p-3">
                    <h3 class="font-semibold line-clamp-2">{rTitle}</h3>
                    <p class="text-sm text-slate-500 line-clamp-2">
                      {r.data?.description}
                    </p>
                    <div class="mt-2 text-xs text-slate-500">
                      {r.data?.subject && <span>{r.data.subject}</span>}
                      {r.data?.level && <span> · {r.data.level}</span>}
                    </div>
                  </div>
                </a>
              );
            })}
          </div>
        </section>
      )
    }
  </article>

  <style is:global>
    .icon {
      width: 16px;
      height: 16px;
      display: block;
    }
  </style>
</BaseLayout>
